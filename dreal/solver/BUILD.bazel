load("//third_party/com_github_robotlocomotion_drake:tools/workspace/cpplint.bzl", "cpplint")
load(
    "//tools:dreal.bzl",
    "dreal_cc_googletest",
    "dreal_cc_library",
)
load("@rules_pkg//:pkg.bzl", "pkg_tar")

package(default_visibility = ["//visibility:private"])

# ---------
# Libraries
# ---------
dreal_cc_library(
    name = "config",
    srcs = [
        "config.cc",
    ],
    hdrs = [
        "config.h",
    ],
    visibility = ["//visibility:public"],
    deps = [
        "//dreal/util:box",
        "//dreal/util:dynamic_bitset",
        "//dreal/util:option_value",
    ],
)

# We combine context and theory_solver in a single target because they
# have mutual dependencies.
dreal_cc_library(
    name = "solver",
    srcs = [
        "context.cc",
        "context_impl.cc",
        "context_impl.h",
        "qsoptex_context_impl.cc",
        "qsoptex_context_impl.h",
        "qsoptex_sat_solver.cc",
        "qsoptex_theory_solver.cc",
    ] + select({
        "//:soplex-enabled": [
            "soplex_context_impl.cc",
            "soplex_context_impl.h",
            "soplex_sat_solver.cc",
            "soplex_theory_solver.cc",
        ],
        "//conditions:default": [],
    }),
    hdrs = [
        "context.h",
        "qsoptex_sat_solver.h",
        "qsoptex_theory_solver.h",
    ] + select({
        "//:soplex-enabled": [
            "soplex_sat_solver.h",
            "soplex_theory_solver.h",
        ],
        "//conditions:default": [],
    }),
    local_defines = select({
        "//:soplex-enabled": ["HAVE_SOPLEX=1"],
        "//conditions:default": ["HAVE_SOPLEX=0"],
    }),
    visibility = [
        "//:__pkg__",
        "//dreal/api:__pkg__",
        "//dreal/dr:__pkg__",
        "//dreal/examples:__pkg__",
        "//dreal/smt2:__pkg__",
    ],
    deps = [
        ":config",
        "//dreal:qsopt-ex",
        "//dreal:version_header",
        "//dreal/smt2:logic",
        "//dreal/smt2:sort",
        "//dreal/symbolic",
        "//dreal/util:assert",
        "//dreal/util:box",
        "//dreal/util:cds",
        "//dreal/util:dynamic_bitset",
        "//dreal/util:exception",
        "//dreal/util:if_then_else_eliminator",
        "//dreal/util:infty",
        "//dreal/util:interrupt",
        "//dreal/util:literal",
        "//dreal/util:logging",
        "//dreal/util:math",
        "//dreal/util:nnfizer",
        "//dreal/util:optional",
        "//dreal/util:plaisted_greenbaum_cnfizer",
        "//dreal/util:predicate_abstractor",
        "//dreal/util:scoped_unordered_map",
        "//dreal/util:scoped_unordered_set",
        "//dreal/util:scoped_vector",
        "//dreal/util:stat",
        "//dreal/util:timer",
        "//third_party/com_github_progschj_threadpool:thread_pool",
        "@fmt",
        "@picosat",
    ] + select({
        "//:soplex-enabled": ["//dreal:soplex"],
        "//conditions:default": [],
    }),
)

# -----
# Tests
# -----

dreal_cc_googletest(
    name = "config_test",
    tags = ["unit"],
    deps = [
        ":config",
        ":solver",
        "//dreal/api",
        "//dreal/util:logging",
    ],
)

dreal_cc_googletest(
    name = "context_test",
    tags = ["unit"],
    deps = [
        ":solver",
        "//dreal/api:api_test_util",
        "//dreal/symbolic:symbolic_test_util",
    ],
)

dreal_cc_googletest(
    name = "jorge_test",
    local_defines = select({
        "//:soplex-enabled": ["HAVE_SOPLEX=1"],
        "//conditions:default": ["HAVE_SOPLEX=0"],
    }),
    tags = ["unit"],
    deps = [
        ":solver",
        "//dreal/symbolic:symbolic_test_util",
    ],
)

dreal_cc_googletest(
    name = "sat_solver_test",
    local_defines = select({
        "//:soplex-enabled": ["HAVE_SOPLEX=1"],
        "//conditions:default": ["HAVE_SOPLEX=0"],
    }),
    tags = ["unit"],
    deps = [
        ":solver",
        "//dreal/symbolic:symbolic_test_util",
        "//dreal/util:logging",
    ],
)

# ----------------------
# Header files to expose
# ----------------------
filegroup(
    name = "headers",
    srcs = [
        "config.h",
        "context.h",
    ],
    visibility = ["//:__pkg__"],
)

pkg_tar(
    name = "package_headers",
    srcs = [
        ":headers",
    ],
    extension = "tar.gz",
    package_dir = "include/dreal/solver",
    tags = ["manual"],
    visibility = ["//:__pkg__"],
)

cpplint()

licenses(["notice"])  # Apache 2.0

exports_files(["LICENSE"])
